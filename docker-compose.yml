version: '3.8'

services:
  # Base de datos MySQL
  mysql:
    image: mysql:8.0
    container_name: nitro-api-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: nitro_api
      MYSQL_USER: nitro_user
      MYSQL_PASSWORD: nitro_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - nitro-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Base de datos PostgreSQL (alternativa)
  postgres:
    image: postgres:15-alpine
    container_name: nitro-api-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nitro_api
      POSTGRES_USER: nitro_user
      POSTGRES_PASSWORD: nitro_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nitro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nitro_user -d nitro_api"]
      timeout: 20s
      retries: 10

  # Aplicación NestJS
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nitro-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Configuración de la aplicación
      NODE_ENV: production
      PORT: 3000
      
      # Configuración de base de datos (MySQL por defecto)
      APP_DB_PROVIDER: mysql
      MYSQL_DB_HOST: mysql
      MYSQL_DB_PORT: 3306
      MYSQL_DB_USER: nitro_user
      MYSQL_DB_PASSWORD: nitro_password
      MYSQL_DB_NAME: nitro_api
      
      # Configuración de base de datos (PostgreSQL - comentado)
      # APP_DB_PROVIDER: postgres
      # PG_DB_HOST: postgres
      # PG_DB_PORT: 5432
      # PG_DB_USER: nitro_user
      # PG_DB_PASSWORD: nitro_password
      # PG_DB_NAME: nitro_api
      
      # Configuración JWT (ajustar según tu configuración)
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 24h
      
      # Configuración de archivos
      UPLOAD_DEST: ./uploads
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
      # postgres:
      #   condition: service_healthy
    networks:
      - nitro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      timeout: 10s
      retries: 5

  # Nginx (opcional - para producción)
  nginx:
    image: nginx:alpine
    container_name: nitro-api-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - nitro-network

volumes:
  mysql_data:
  postgres_data:
  uploads_data:

networks:
  nitro-network:
    driver: bridge 